1.  comment
/* <!-- 

 --> */

2. route template

<div class="paragraph-section">
        <div class="sub-paragraph">
             <h2>Design Projects</h2>
             
        </div>
</div>

3. background image


00. style={{backgroundImage: `url("assets/images/uploads/1.jpg")`,  backgroundRepeat: 'no-repeat',backgroundPosition: 'left center'}}
01. style={{backgroundImage: 'url("./assets/images/uploads/1.jpg")'}}

<div className="bgcommanSec" style={{ backgroundImage: `url("assets/images/uploads/1.jpg")` }} > </div>


 01.              ======== #css: create folder on src > images > nav-arrow.png ========

.owl-carousel .owl-nav button.owl-prev span{
	
	background-image: url(./images/nav-arrow.png);
	background-repeat: no-repeat;
	background-position: left center;
	background-size: 18px 53px;
	display: inline-block;
	transform: rotate(180deg);
}

<div className=" owl-prev" >  </div>

02.                        =========== ## js ## backgroundImage: `url(${favicon})`  ==============   

import favicon from "../images/favicon.png";

 <div style={{
            width: '150px',
            height:'150px',
            backgroundImage: `url(${favicon})`,
            backgroundRepeat: 'no-repeat',
	    backgroundPosition: 'left center'
          }}> 
</div>

OR
03.  backgroundImage: `url(${require('./images/nav-arrow.png')})`,

 <div style={{
            width: '150px',
            height:'150px',
            backgroundImage: `url(${require('../images/nav-arrow.png')})`,
            backgroundRepeat: 'no-repeat',
	    backgroundPosition: 'left center'
          }}> 
</div>

 04.               ======== images/index.js ==============

src\images\index.js
const IMAGES = {
    imgFav: require('./favicon.png'),
    imgArrow: require('./nav-arrow.png'),
}

export default IMAGES;

                ** and page import const IMAGES any page

import IMAGES from '../images/index.js'

<div style={{ backgroundImage: `url(${IMAGES.imgFav})`}}> 
</div>


=== Bootstrap ====

npm install react-bootstrap bootstrap


<div className="container"> 
   <div className="row"> 

     <div className="col-sm-7 col-md-7 col-lg-7"> </div>

   </div> 
</div> 

=== common section bg image ===

<div className="bgcommanSec" style={{backgroundImage: `url("assets/images/uploads/2.jpg")`}}></div>


	                                      ==== react run dev ====
	
npm install --save-dev nodemon
Go in the package.json and add "dev": "nodemon ./bin/www"



	==== react run dev ====
	
	npm install --save-dev nodemon
Go in the package.json and add "dev": "nodemon ./bin/www"


                              ===== Laravel react ==

  npm i react-axios

  ==== React with Laravel =====


https://legacy.reactjs.org/docs/faq-ajax.html

0. npm i axios


1. php artisan make:controller frontend/BasicController

    public function index()
    {
        $basics = Basic::get();

        echo json_encode(['Success' => "Yes", 'datas' => $basics]);

    }


2. routes\Api.php

    use App\Http\Controllers\frontend\BasicController as FrontendBasicController;
    Route::get('/basic-frontend', [FrontendBasicController::class, 'index'])->name('basic.fe');


OR
    Route::get('/basic-fe', function () {
    $basics = Basic::get();
    return response()->json($basics);
    });


3. json data link
    http://127.0.0.1:8000/api/basic-fe


4. config\cors.php

     'allowed_origins' => ['http://localhost:3000/'],

    php artisan optimize



5. specific page.js

import axios from "axios";
import React, { useEffect, useState } from "react";
import { Link } from "react-router-dom";

function MyComponent() {

    const [error, setError] = useState(null);
    const [isLoaded, setIsLoaded] = useState(false);
    const [items, setItems] = useState([]);

    // Note: the empty deps array [] means
    // this useEffect will run once
    // similar to componentDidMount()
    useEffect(() => {
        fetch("https://api.example.com/items")
        .then(res => res.json())
        .then(
            (result) => {
            setIsLoaded(true);
            setItems(result);
            },
            // Note: it's important to handle errors here
            // instead of a catch() block so that we don't swallow
            // exceptions from actual bugs in components.
            (error) => {
            setIsLoaded(true);
            setError(error);
            }
        )
    }, [])




   

  {items.map((item) => (

      key={item.id}

      {item.title} 

   ))}


    OR //

 if (error) {
    return <div>Error: {error.message}</div>;
  } else if (!isLoaded) {
    return <div>Loading...</div>;
  } else {
    return (
      <ul>
        {items.map(item => (
          <li key={item.id}>
            {item.name} {item.price}
          </li>
        ))}
      </ul>
    );
  }
}





